import { useState, useEffect } from 'react';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

/**
 * Github base uri.
 *
 */
var GITHUB_URI = "https://api.github.com/users";
/**
 * Get User's total stars of all time.
 *
 * @param {string} username
 * @param {number | string} per_page
 * @returns {Promise<number>}
 */
var getUserTotalStars = function (username, per_page) {
    if (per_page === void 0) { per_page = 100; }
    return new Promise(function (resolve, reject) {
        fetch(GITHUB_URI + "/" + username + "/repos?per_page=" + per_page)
            .then(function (response) {
            response.json().then(function (data) {
                if (!data)
                    reject("Data not found!");
                var stars = data.reduce(function (prev, curr) {
                    return prev + curr.stargazers_count;
                }, 0);
                resolve(stars);
            });
        })
            .catch(reject);
    });
};
/**
 * Get User's total forks of all time.
 *
 * @param {string} username
 * @param {number | string} per_page
 * @returns {Promise<number>}
 */
var getUserTotalForks = function (username, per_page) {
    if (per_page === void 0) { per_page = 100; }
    return new Promise(function (resolve, reject) {
        fetch(GITHUB_URI + "/" + username + "/repos?per_page=" + per_page)
            .then(function (response) {
            response.json().then(function (data) {
                if (!data)
                    reject("Data not found!");
                var forks = data.reduce(function (prev, curr) {
                    return prev + curr.forks;
                }, 0);
                resolve(forks);
            });
        })
            .catch(reject);
    });
};
/**
 * Get User's github profile data.
 *
 * @param {string} username
 * @returns {Promise<any>}
 */
var getUserProfileData = function (username) {
    return new Promise(function (resolve, reject) {
        fetch(GITHUB_URI + "/" + username)
            .then(function (response) {
            response.json().then(function (data) {
                resolve(data);
            });
        })
            .catch(reject);
    });
};

function useGithubStats(username, per_page) {
    var _this = this;
    if (per_page === void 0) { per_page = 100; }
    var _a = useState(false), loading = _a[0], setLoading = _a[1];
    var _b = useState(""), error = _b[0], setError = _b[1];
    var _c = useState(null), userData = _c[0], setUserData = _c[1];
    var getUserData = function () { return __awaiter(_this, void 0, void 0, function () {
        var data, stars, forks, e_1, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!username) {
                        setError("Missing parameter `username` on `useGithubStats` hook!");
                        return [2 /*return*/];
                    }
                    setLoading(true);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 5, , 6]);
                    return [4 /*yield*/, getUserProfileData(username)];
                case 2:
                    data = _a.sent();
                    return [4 /*yield*/, getUserTotalStars(username, per_page)];
                case 3:
                    stars = _a.sent();
                    return [4 /*yield*/, getUserTotalForks(username, per_page)];
                case 4:
                    forks = _a.sent();
                    setUserData({
                        id: data === null || data === void 0 ? void 0 : data.id,
                        name: data === null || data === void 0 ? void 0 : data.name,
                        username: username,
                        avatar_url: data === null || data === void 0 ? void 0 : data.avatar_url,
                        url: data === null || data === void 0 ? void 0 : data.html_url,
                        type: data === null || data === void 0 ? void 0 : data.type,
                        company: data === null || data === void 0 ? void 0 : data.company,
                        website: data === null || data === void 0 ? void 0 : data.blog,
                        location: data === null || data === void 0 ? void 0 : data.location,
                        email: data === null || data === void 0 ? void 0 : data.email,
                        bio: data === null || data === void 0 ? void 0 : data.bio,
                        twitter_username: data === null || data === void 0 ? void 0 : data.twitter_username,
                        public_repos: data === null || data === void 0 ? void 0 : data.public_repos,
                        public_gists: data === null || data === void 0 ? void 0 : data.public_gists,
                        followers: data === null || data === void 0 ? void 0 : data.followers,
                        following: data === null || data === void 0 ? void 0 : data.following,
                        total_stars: stars,
                        total_forks: forks,
                        created_at: data === null || data === void 0 ? void 0 : data.created_at,
                        updated_at: data === null || data === void 0 ? void 0 : data.updated_at,
                    });
                    return [3 /*break*/, 6];
                case 5:
                    e_1 = _a.sent();
                    error_1 = e_1;
                    console.log(error_1);
                    setError((error_1 === null || error_1 === void 0 ? void 0 : error_1.message) || "An error occurred while fetching user' data");
                    return [3 /*break*/, 6];
                case 6:
                    setLoading(false);
                    return [2 /*return*/];
            }
        });
    }); };
    useEffect(function () {
        getUserData();
    }, [username, per_page]);
    return { error: error, loading: loading, userData: userData };
}

export { useGithubStats as default };
//# sourceMappingURL=index.es.js.map
